server.port=8092

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.default_schema=pruebas_generic
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.sql.init.mode=always
spring.sql.init.data-locations=classpath:data.sql
spring.sql.init.schema-locations: classpath:schema.sql

spring.cloud.function.definition=eventProcessor;crearConsumer;ackConsumer

spring.cloud.stream.bindings.eventProcessor-out-0.destination=matricula.topic
spring.cloud.stream.bindings.crearConsumer-in-0.destination=usuarios.topic

#Creamos un groupo por consumidor, para en el caso de que haya varios cluster del mismo no duplique el evento y lo consuma el mas rapido.
spring.cloud.stream.bindings.crearConsumer-in-0.group=crearConsumerQueue

#spring.cloud.stream.poller.fixed-delay=15000
spring.cloud.stream.rabbit.bindings.eventProcessor-out-0.producer.routingKeyExpression=@eventTypeResolver.eventType(payload)
#spring.cloud.stream.rabbit.bindings.default.consumer.bindingRoutingKeyDelimiter=,

spring.cloud.stream.rabbit.bindings.crearConsumer-in-0.consumer.bindingRoutingKey=events.1.es.um.atica.umuexample.usuarios.domain.event.CrearUsuarioEvent

#enabled binder retries
spring.cloud.stream.bindings.crearConsumer-in-0.consumer.max-attempts=3
#dlx/dlq setup
spring.cloud.stream.rabbit.bindings.crearConsumer-in-0.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.crearConsumer-in-0.consumer.dlq-ttl=5000
spring.cloud.stream.rabbit.bindings.crearConsumer-in-0.consumer.republish-to-dlq=true

#Esto para el confirmACK
spring.rabbitmq.publisher-confirm-type=correlated
spring.rabbitmq.publisher-returns=true
spring.cloud.stream.rabbit.bindings.eventProcessor-out-0.producer.confirm-ack-channel=ackConsumer
spring.cloud.stream.rabbit.bindings.output.producer.errorChannelEnabled=true
#Propertie que indica si hay que cargar la funcionalidad para fallback (tiene que estar a true si tiramos de rabbit)
umubus.event.producer=true

spring.cloud.stream.bindings.ackConsumer-in-0.destination=matricula.topic
spring.cloud.stream.bindings.ackConsumer-in-0.group=ackConsumerQueue
spring.cloud.stream.rabbit.bindings.ackConsumer-in-0.consumer.bindingRoutingKey=events.1.es.um.atica.umuexample.matriculas.domain.event.#
#spring.cloud.stream.rabbit.bindings.crearConsumer-in-0.consumer.dlq-binding-arguments.

#Configuracion chaosMonkey:

#Para activarlo desde properties
chaos.monkey.enabled=true

#Activar el administrador desde la web, a traves de endpoints:
management.endpoint.chaosmonkey.enabled=true
management.endpoint.chaosmonkeyjmx.enabled=true
# include all endpoints
management.endpoints.web.exposure.include=*
management.server.port=8888

#Properties para activas durante el arranque:
#Vigilantes a activar
chaos.monkey.watcher.controller=false
chaos.monkey.watcher.restController=false
chaos.monkey.watcher.service=true
chaos.monkey.watcher.repository=false
chaos.monkey.watcher.component=false
#Limita los paquetes, clases, etc... a vigilar (Si queremos especificar)
#chaos.monkey.assaults.watchedCustomServices=es.um.atica.umubus.adapters.events.RabbitEventBus, es.um.atica.umuexample.users.adapters.events.CrearUsuarioConsumer

#Magia de cositas para empezar el caos
chaos.monkey.assaults.latencyActive=true
chaos.monkey.assaults.latencyRangeStart=3000
chaos.monkey.assaults.latencyRangeEnd=15000
chaos.monkey.assaults.exceptions-active=true
#chaos.monkey.assaults.kill-application-active=true

#Configuracion de frecuencia y tipos
chaos.monkey.assaults.level=3
#chaos.monkey.assaults.exception.type=java.lang.RuntimeException