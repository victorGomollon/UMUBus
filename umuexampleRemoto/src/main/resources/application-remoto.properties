server.port=8090

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.default_schema=pruebas_remoto
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.sql.init.mode=always
spring.sql.init.data-locations=classpath:data.sql
spring.sql.init.schema-locations: classpath:schema.sql

#Configuracion para remoto

spring.cloud.function.definition=eventProcessor;crearConsumer;crearConsumer2;actualizarConsumer;eliminarConsumer;crearMatConsumer;ackConsumer

spring.cloud.stream.bindings.eventProcessor-out-0.destination=usuarios.topic
spring.cloud.stream.bindings.crearConsumer-in-0.destination=usuarios.topic
spring.cloud.stream.bindings.crearConsumer2-in-0.destination=usuarios.topic
spring.cloud.stream.bindings.eliminarConsumer-in-0.destination=usuarios.topic
spring.cloud.stream.bindings.actualizarConsumer-in-0.destination=usuarios.topic
spring.cloud.stream.bindings.crearMatConsumer-in-0.destination=matricula.topic

#Creamos un groupo por consumidor, para en el caso de que haya varios cluster del mismo no duplique el evento y lo consuma el mas rapido.
spring.cloud.stream.bindings.crearConsumer-in-0.group=crearConsumerQueue
spring.cloud.stream.bindings.crearConsumer2-in-0.group=crearConsumer2Queue
spring.cloud.stream.bindings.eliminarConsumer-in-0.group=eliminarConsumerQueue
spring.cloud.stream.bindings.actualizarConsumer-in-0.group=actualizarConsumerQueue
spring.cloud.stream.bindings.crearMatConsumer-in-0.group=crearMatConsumerQueue

#spring.cloud.stream.poller.fixed-delay=15000
spring.cloud.stream.rabbit.bindings.eventProcessor-out-0.producer.routingKeyExpression=@eventTypeResolver.eventType(payload)
#spring.cloud.stream.rabbit.bindings.default.consumer.bindingRoutingKeyDelimiter=,

spring.cloud.stream.rabbit.bindings.crearConsumer-in-0.consumer.bindingRoutingKey=events.1.es.um.atica.umuexample.usuarios.domain.event.CrearUsuarioEvent
spring.cloud.stream.rabbit.bindings.crearConsumer2-in-0.consumer.bindingRoutingKey=events.1.es.um.atica.umuexample.usuarios.domain.event.CrearUsuarioEvent
spring.cloud.stream.rabbit.bindings.eliminarConsumer-in-0.consumer.bindingRoutingKey=events.1.es.um.atica.umuexample.usuarios.domain.event.EliminarUsuarioEvent
spring.cloud.stream.rabbit.bindings.actualizarConsumer-in-0.consumer.bindingRoutingKey=events.1.es.um.atica.umuexample.usuarios.domain.event.ActualizarUsuarioEvent
spring.cloud.stream.rabbit.bindings.crearMatConsumer-in-0.consumer.bindingRoutingKey=events.1.es.um.atica.umuexample.matriculas.domain.event.CrearMatriculaEvent

#enabled binder retries
spring.cloud.stream.bindings.crearConsumer-in-0.consumer.max-attempts=3
spring.cloud.stream.bindings.crearConsumer2-in-0.consumer.max-attempts=3
spring.cloud.stream.bindings.eliminarConsumer-in-0.consumer.max-attempts=3
spring.cloud.stream.bindings.actualizarConsumer-in-0.consumer.max-attempts=3
spring.cloud.stream.bindings.crearMatConsumer-in-0.consumer.max-attempts=3
#dlx/dlq setup
spring.cloud.stream.rabbit.bindings.crearConsumer-in-0.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.crearConsumer-in-0.consumer.dlq-ttl=5000
spring.cloud.stream.rabbit.bindings.crearConsumer-in-0.consumer.republish-to-dlq=true
spring.cloud.stream.rabbit.bindings.crearConsumer2-in-0.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.crearConsumer2-in-0.consumer.dlq-ttl=5000
spring.cloud.stream.rabbit.bindings.crearConsumer2-in-0.consumer.republish-to-dlq=true
spring.cloud.stream.rabbit.bindings.eliminarConsumer-in-0.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.eliminarConsumer-in-0.consumer.dlq-ttl=5000
spring.cloud.stream.rabbit.bindings.eliminarConsumer-in-0.consumer.republish-to-dlq=true
spring.cloud.stream.rabbit.bindings.actualizarConsumer-in-0.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.actualizarConsumer-in-0.consumer.dlq-ttl=5000
spring.cloud.stream.rabbit.bindings.actualizarConsumer-in-0.consumer.republish-to-dlq=true
spring.cloud.stream.rabbit.bindings.crearMatConsumer-in-0.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.crearMatConsumer-in-0.consumer.dlq-ttl=5000
spring.cloud.stream.rabbit.bindings.crearMatConsumer-in-0.consumer.republish-to-dlq=true

#Esto para el confirmACK
#spring.rabbitmq.publisher-confirm-type=correlated
#spring.rabbitmq.publisher-returns=true
#spring.cloud.stream.rabbit.bindings.eventProcessor-out-0.producer.confirm-ack-channel=ackConsumer
#spring.cloud.stream.rabbit.bindings.output.producer.errorChannelEnabled=true
#Propertie que indica si hay que cargar la funcionalidad para fallback (tiene que estar a true si tiramos de rabbit)
umubus.event.producer=true

spring.cloud.stream.bindings.ackConsumer-in-0.destination=usuarios.topic
spring.cloud.stream.bindings.ackConsumer-in-0.group=ackConsumerQueue
spring.cloud.stream.rabbit.bindings.ackConsumer-in-0.consumer.bindingRoutingKey=events.1.es.um.atica.umuexample.usuarios.domain.event.#
#spring.cloud.stream.rabbit.bindings.crearConsumer-in-0.consumer.dlq-binding-arguments.
